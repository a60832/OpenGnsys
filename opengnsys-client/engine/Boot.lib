#!/bin/bash
#/**
#@file    Boot.lib
#@brief   Librería o clase Boot
#@class   Boot
#@brief   Funciones para arranque y post-configuración de sistemas de archivos.
#@version 0.9
#@warning License: GNU GPLv3+
#*/


#/**
#         ogBoot int_ndisk int_npartition
#@brief   Inicia el proceso de arranque de un sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  (activar el sistema de archivos).
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Tipo de partición desconocido o no se puede montar.
#@exception OG_ERR_NOTOS     La partición no tiene instalado un sistema operativo.
#@warning Primeras pruebas.
#@todo    Revisar parámetros de arranque en Windows y Linux.
#@version 0.1 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-11
#*/
function ogBoot () {

# Variables locales.
local PART TYPE MNTDIR PARAMS KERNEL INITRD APPEND FILE LOADER

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Detectar tipo de sistema de archivos y montarlo.
TYPE=$(ogGetFsType $1 $2) || return $?
MNTDIR=$(ogMount $1 $2)
[ -z "$MNTDIR" ] && ogRaiseError OG_ERR_PARTITION && return $?

case "$TYPE" in
     EXT[234]|REISERFS|REISER4)
	#/// Obtiene los parámetros de arranque para Linux.
	PARAMS=$(ogLinuxBootParameters $1 $2) || return $?
	read -e KERNEL INITRD APPEND <<<"$PARAMS"
	# Si no hay kernel, no hay sistema operativo.
	[ -z "$KERNEL" ] && ogRaiseError $OG_ERR_NOTOS && return $?
	# Configurar kernel Linux con los parámetros leidos de su GRUB.
	kexec -l ${MNTDIR}${KERNEL} --append="$APPEND" --initrd=${MNTDIR}${INITRD}
	;;
     NTFS|HNTFS|FAT32|HFAT32)
	#/// Compruebar si hay un cargador de Windows.
	for f in io.sys ntldr bootmgr; do
	    FILE="$(ogGetPath $1 $2 $f 2>/dev/null)"
	    [ -n "$FILE" ] && LOADER="$(basename $FILE)"
	done
	[ -z "$LOADER" ] && ogRaiseError $OG_ERR_NOTOS && return $?
	# Activar la partición y copiar Grub4DOS.
	ogSetPartitionActive $1 $2
	cp $OGLIB/grub4dos/* $MNTDIR
	kexec -l $MNTDIR/grub.exe --append=--config-file="find --set-root /$LOADER; chainloader /$LOADER; tpm --init"
	;;
     *) ogRaiseError $OG_ERR_PARTITION
        return $?
	;;
esac

#/// Arrancar.
kexec -e
}


#/**
#         ogGetRegistryKey path_mountpoint str_registrytype str_key
#@brief   Devuelve el valor de una clave del registro de Windows.
#@arg  \c mountpoint   directorio donde está montado el sistema Windows
#@arg  \c registrytype tipo de registro a leer
#@arg  \c key          clave de registro
#@return  str_keyvalue - valor de la clave.
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Tipo de partición desconocido o no se puede montar.
#@note    registrytype = { default, sam, security, software, system, components }
#@warning Requisitos: chntpw, awk
#@warning La partición de Windows debe estar montada previamente.
#@version 0.9 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-11
#*/
function ogGetRegistryKey () {

# Variables locales.
local FILE FILE FILEXP

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME path_mountpoint str_registrytype str_key"
    return
fi
#/// Error si no se reciben 3 parámetros.
[ $# == 3 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Camino del fichero de registro en NT/2000 o XP/Vista/7.
FILENT=$(ogGetPath "/$1/winnt/system32/config/$2")
[ -f $FILENT ] && FILE="$FILENT" 
FILEXP=$(ogGetPath "/$1/windows/system32/config/$2")
[ -f $FLEHXP ] && FILE="$FILEXP" 
[ ! -f $FILE ] && ogRaiseError OG_ERR_NOTFOUND "$1,$2" && return $?

#/// Devolver la clave de registro.
chntpw $FILE << FIN 2>/dev/null | awk '/> Value/ {getline;print $0;}'
cd ${3%\\*}
cat ${3##*\\}
q
FIN
}


#/**
#         ogLinuxBootParameters int_ndisk int_npartition
#@brief   Muestra los parámetros de arranque de un sistema de archivos Linux.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  kernel initrd parámetros ...
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Tipo de partición desconocido o no se puede montar.
#@warning Función básica usada por \c ogBoot
#@version 0.9 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-11
#*/
function ogLinuxBootParameters () {

# Variables locales.
local MNTDIR CONF

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 2  ==>  ..."
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Detectar id. de tipo de partición y codificar al mnemonico.
MNTDIR=$(ogMount $1 $2) || return $?
[ -z "$MNTDIR" ] && ogRaiseError OG_ERR_PARTITION && return $?

# Fichero de configuración de GRUB.
CONF="$MNTDIR/boot/grub/menu.lst"
[ ! -e $CONF ] && ogRaiseError $OG_ERR_NOTFOUND && return $?

#/** Toma del fichero de configuracion los valores del kernel, initrd
#       y parámetros de arranque usando las cláusulas por defecto, y
#       los formatea para que sean compatibles con \c kexec .  */
awk 'BEGIN {cont=-1;}
     $1~/^default/      {sub(/=/," "); def=$2;}
     $1~/^title/        {cont++}
     $1~/^kernel/       {if (def==cont) {
                            kern=$2;
                            sub($1,"");sub($1,"");sub(/^[ \t]*/,"");app=$0}
                        }
     $1~/^initrd/       {if (def==cont) init=$2}
     END {if (kern!="") printf("%s %s %s", kern,init,app)}
    ' $CONF
}

