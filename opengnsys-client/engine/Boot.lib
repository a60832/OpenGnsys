#!/bin/bash
#/**
#@file    Boot.lib
#@brief   Librería o clase Boot
#@class   Boot
#@brief   Funciones para arranque y post-configuración de sistemas de archivos.
#@version 0.9
#@warning License: GNU GPLv3+
#*/


#/**
#         ogBoot int_ndisk int_npartition
#@brief   Inicia el proceso de arranque de un sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  (activar el sistema de archivos).
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Tipo de partición desconocido o no se puede montar.
#@exception OG_ERR_NOTOS     La partición no tiene instalado un sistema operativo.
#@warning Primeras pruebas.
#@version 0.1 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-11
#*/
function ogBoot () {

# Variables locales.
local PART TYPE MNTDIR PARAMS KERNEL INITRD APPEND

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Detectar id. de tipo de partición y codificar al mnemonico.
PART=$(ogDiskToDev $1 $2) || return $?
TYPE=$(ogGetFsType $1 $2) || return $?
MNTDIR=$(ogGetMount $1 $2) || ogRaiseError OG_ERR_PARTITION || return $?

case "$TYPE" in
     NTFS|HNTFS|FAT32|HFAT32)	# Arranque Windows.
	# Activar la particion.
	#ogSetPartitionActive $1 $2
	#/// Compruebar si hay un cargador de Windows.
	#for f in io.sys ntldr bootmgr; do
	#    FILE="$(ogPath $1 $2 $f)"
	#    [ -n "$FILE" ] && LOADER="$(basename $FILE)"
	#done
	#[ -z "$LOADER" ] && ogRaiseError $OG_ERR_NOTOS && return $?
	# Copiar y configurar GRUB4DOS
	#cp $REPO/admin/gestion/grub/* $DIRMONT
	#kexec -l $MNTDIR/grub.exe --append=--config-file="find --set-root /$LOADER; chainloader /$LOADER; tpm --init"
	;;
     EXT[234]|REISERFS|REISER4)	# Arranque Linux.
	# Obtiene los parametros de arranque.
	PARAMS=$(ogLinuxBootParameters $1 $2) || return $?
	read -e KERNEL INITRD APPEND <<<"$PARAMS"
	# Si no hay kernel, no hay sistema operativo.
	[ -z "$KERNEL" ] && ogRaiseError $OG_ERR_NOTOS && return $?
	# Configurar kernel Linux con los parametros leidos de su GRUB.
	kexec -l ${MNTDIR}${KERNEL} --append="$APPEND" --initrd=${MNTDIR}${INITRD}
	;;
     *) ogRaiseError $OG_ERR_PARTITION
        return $?*
	;;
esac

# Arrancar.
kexec -e
}


#/**
#         ogLinuxBootParametes int_ndisk int_npartition
#@brief   Muestra los parámetros de arranque de un sistema de archivos Linux.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  kernel initrd parámetros ...
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Tipo de partición desconocido o no se puede montar.
#@warning Primeras pruebas.
#@version 0.1 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-11
#*/
function ogLinuxBootParameters () {

# Variables locales.
local PART MNTDIR PARAMS KERNEL INITRD APPEND

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 2  ==>  ..."
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Detectar id. de tipo de partición y codificar al mnemonico.
PART=$(ogDiskToDev $1 $2) || return $?
MNTDIR=$(ogGetMount $1 $2) || ogRaiseError OG_ERR_PARTITION || return $?

# Fichero de configuración de GRUB.
CONF="$MNTDIR/boot/grub/menu.lst"
[ ! -e $CONF ] && ogRaiseError $OG_ERR_NOTFOUND && return $?

#/// Toma del fichero de configuracion los valores del kernel, initrd
#///    y parámetros de arranque usando las cláusulas por defecto, y
#///    los formatea para que sean compatibles con \c kexec .
awk 'BEGIN {cont=-1;}
     $1~/^default/      {sub(/=/," "); def=$2;}
     $1~/^title/        {cont++}
     $1~/^kernel/       {if (def==cont) {
                            kern=$2;
                            sub($1,"");sub($1,"");sub(/^[
\t]*/,"");app=$0}
                        }
     $1~/^initrd/       {if (def==cont) init=$2}
     END {if (kern!="") printf("%s %s %s", kern,init,app)}
    ' $CONF
}

