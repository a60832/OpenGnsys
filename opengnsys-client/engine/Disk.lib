#!/bin/bash
#/**
#@file    Disk.lib
#@brief   Librería o clase Disk
#@class   Disk
#@brief   Funciones para gestión de discos y particiones.
#@version 0.9
#@warning License: GNU GPLv3+
#*/

#/**
#         ogDiskToDev [ndisk [npartition]]
#@brief   Devuelve la equivalencia entre el nº de orden del dispositivo (dicso o partición) y el nombre de fichero de dispositivo correspondiente.
#@arg  \c int_ndisk      nº de orden del disco
#@arg  \c int_npartition nº de orden de la partición
#@return  Para 0 parametros: Devuelve los nombres de ficheros  de los dispositivos sata/ata/usb linux encontrados.
#@return  Para 1 parametros: Devuelve la ruta del disco duro indicado.
#@return  Para 2 parametros: Devuelve la ruta de la particion indicada.
#@exception OG_ERR_FORMAT   Formato incorrecto.
#@exception OG_ERR_NOTFOUND Dispositivo no detectado.
#@note    Requisitos: awk
#@version 0.9 - Primera versión para OpenGNSys
#@author  Ramon Gomez, ETSII Universidad Sevilla
#@date    2009-07-20
#*/
function ogDiskToDev () {

#/// Variables locales
local FORMAT="$FUNCNAME int_ndisk [int_npartition]"
local EXAMPLE="$FUNCNAME 1_1"
local ALLDISKS DISK PART

#/// Listar dispositivo para los discos duros (tipos: 3=hd, 8=sd).
ALLDISKS=$(awk '($1==3 || $1==8) && $4!~/[0-9]/ {printf "/dev/%s ",$4}' /proc/partitions)

#/// Mostrar salidas segun el número de parametros.
case $# in
     0) # Muestra todos los discos, separados por espacios.
	echo "$ALLDISKS"
	;;
     1) # Error si el parametro no es un digito.
	[ -z "${1/[1-9]/}" ] || ogRaiseError $OG_ERR_FORMAT "$FORMAT" "$EXAMPLE" || return $?
	DISK=$(echo $ALLDISKS | awk -v n=$1 '{print $n}')
	# Error si no es fichero de bloques.
	[ -b "$DISK" ] || ogRaiseError $OG_ERR_NOTFOUND "$1" || return $?
	echo "$DISK"
	;;
     2) # Error si los 2 parametros no son digitos.
	[ -z "${1/[1-9]/}" -a -z "${2/[1-9]/}" ] || ogRaiseError $OG_ERR_FORMAT "$FORMAT" "$EXAMPLE" || return $?
	PART=$(echo $ALLDISKS | awk -v n=$1 '{print $n}')$2
	# Error si no es fichero de bloques.
	[ -b "$PART" ] || ogRaiseError $OG_ERR_NOTFOUND "$1 $2" || return $?
	echo "$PART"
	;;
     *) # Formato erroneo.
	ogRaiseError $OG_ERR_FORMAT "$FORMAT" "$EXAMPLE"; return $?
esac
}


#/**
#         ogGetPartitionActive ndisk
#@brief   Muestra que particion de un disco esta marcada como de activa.
#@arg  \c int_ndisk      nº de orden del disco
#@return  Nº de partición activa
#@exception OG_ERR_FORMAT Formato incorrecto.
#@exception OG_ERR_NOTFOUND Disco o particion no corresponden con un dispositivo.
#@note    Requisitos: parted
#@warning Queda definir formato para atributos (arranque, oculta, ...).
#@version 0.9 - Primera versión compatible con OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009/07/24
#*/
function ogGetPartitionActive () {

#/// Variables locales
local FORMAT="$FUNCNAME int_ndisk"
local EXAMPLE="$FUNCNAME 1"
local DISK

#/// Error si no se recibe 1 parámetro.
[ $# == 1 ] || ogRaiseError $OG_ERR_FORMAT "$FORMAT" "$EXAMPLE" || return $?

#/// Comprobar que el disco existe y listar su partición activa.
DISK="$(ogDiskToDev $1)" || return $?
parted $DISK print 2>/dev/null | awk '/boot/ {print $1}'
}



#/**
#         ogGetPartitionId ndisk npartition
#@brief   Devuelve el mnemonico con el tipo de sistema de archivos.
#@arg  \c int_ndisk      nº de orden del disco
#@arg  \c int_npartition nº de orden de la partición
#@return  Identificador de tipo de partición.
#@exception OG_ERR_FORMAT Formato incorrecto.
#@exception OG_ERR_NOTFOUND Disco o particion no corresponden con un dispositivo.
#@note    Requisitos: sfdisk
#@version 0.9 - Primera versión compatible con OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    25/03/2009
#*/
function ogGetPartitionId () {

#/// Variables locales.
local FORMAT="$FUNCNAME int_ndisk int_npartition"
local EXAMPLE="$FUNCNAME 1_1"
local DISK PART

#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT "$FORMAT" "$EXAMPLE" || return $?

#/// Detectar id. de tipo de particion y codificar al mnemonico.
DISK=$(ogDiskToDev $1) || return $?
PART=$(ogDiskToDev $1 $2) || return $?
echo $(sfdisk --id $DISK $2 2>/dev/null)
}


#/**
#         ogGetPartitionSize ndisk npartition
#@brief   Muestra el tamano en KB de una particion determinada.
#@arg  \c int_ndisk      nº de orden del disco
#@arg  \c int_npartition nº de orden de la partición
#@return  tamañoKB
#@exception OG_ERR_FORMAT   formato incorrecto.
#@exception OG_ERR_NOTFOUND disco o particion no detectado (no es un dispositivo).
#@note    Requisitos: sfdisk, awk
#@version 0.9 - Primera versión para OpenGNSys
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009/07/24
#*/
function ogGetPartitionSize () {

#/// Variables locales.
local FORMAT="$FUNCNAME int_ndisk int_npartition"
local EXAMPLE="$FUNCNAME 1_1"
local DISK PART

#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT "$FORMAT" "$EXAMPLE" || return $?

#/// Sustituye nº de disco y de partición por sus dispositivos.
DISK="$(ogDiskToDev $1)" || return $?
PART="$(ogDiskToDev $1 $2)" || return $?

#/// Procesar la salida de "sfdisk".
sfdisk -s $PART
}



#/**
#         ogListPartitions ndisk
#@brief   Lista las particiones definidas en un disco.
#@arg  \c int_ndisk  nº de orden del disco
#@return  numpart:tipo:tamanoKB ...
#@exception OG_ERR_FORMAT   formato incorrecto.
#@exception OG_ERR_NOTFOUND disco o particion no detectado (no es un dispositivo).
#@note    Requisitos: \c parted \c awk
#@warning Los datos de las particiones están separados por espacios en blanco.
#@version 0.9 - Primera versión para OpenGNSys
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009/07/24
#*/
function ogListPartitions () {

#/// Variables locales.
local FORMAT="$FUNCNAME int_ndisk"
local EXAMPLE="$FUNCNAME 1"
local DISK PART p

#/// Error si no se recibe 1 parámetro.
[ $# == 1 ] || ogRaiseError $OG_ERR_FORMAT "$FORMAT" "$EXAMPLE" || return $?

#/// Sustituye nº de disco por su dispositivo.
DISK="$(ogDiskToDev $1)" || return $?

#/// Procesar la salida de \c parted .
PARTS=$(parted -s $DISK print | awk '$1~/^[1-9]/ {print $1}')
for p in $PARTS; do
    echo -n "$p:$(ogGetFsType $1 $p):$(ogGetPartitionSize $1 $p) "
done
echo
}

#/**
#         ogUpdateDisk
#@brief   Fuerza al kernel releer la tabla de particiones de los discos duros
#@arg  \c no requiere
#@return  informacion propia de la herramienta
#@exception
#@exception
#@note    Requisitos: \c partprobe
#@warning pendiente estructurar la funcion a opengnsys
#@version 0.1       Date: 27/10/2008                 Author Antonio J. Doblas Viso. Universidad de Malaga
#@note	 funcion importada de EAC
#*/

function ogUpdateDisk () {
echo "Forzando al kernel la lectura de la tabla de particiones"
list=`partprobe -s | cut -f1 -d: ` 2>/dev/null
echo $list > /tmp/disk
}
