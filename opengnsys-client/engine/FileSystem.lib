#!/bin/bash
#/**
#@file    FileSystem.lib
#@brief   Librería o clase FileSystem
#@class   FileSystem
#@brief   Funciones para gestión de sistemas de archivos.
#@version 0.9
#@warning License: GNU GPLv3+
#*/


#/**
#         ogGetFsType int_ndisk int_npartition
#@brief   Devuelve el mnemonico con el tipo de sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  Mnemonico
#@note 	  Mnemonico: { EXT2, EXT3, EXT4, LINUX-SWAP, LINUX-LVM, RAID-EXT[234], BIGDOS, HBIGDOS, FAT32, HFAT32, NTFS, HNTFS, DINAMIC, CACHE, EMPTY, EXTENDED, UNKNOWN }
#@exception OG_ERR_FORMAT   Formato incorrecto.
#@exception OG_ERR_NOTFOUND Disco o particion no corresponden con un dispositivo.
#@version 0.9 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-07-21
#*/
function ogGetFsType () {

#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Detectar id. de tipo de particion y codificar al mnemonico.
local ID=$(ogGetPartitionId $1 $2) || return $?
case "$ID" in
     0) 	TIPO="EMPTY" ;;
     5) 	TIPO="EXTENDED" ;;
     [6e])	TIPO="BIGDOS" ;;
     7) 	TIPO="NTFS" ;;
     [bc])	TIPO="FAT32" ;;
     1[6e])	TIPO="HBIGDOS" ;;
     17)	TIPO="HNTFS" ;;
     1[bc])	TIPO="HFAT32" ;;
     42)	TIPO="DINAMIC" ;;
     82)	TIPO="LINUX-SWAP" ;;
     83)	TIPO="$(parted -s $DISCO print | awk -v var=$2 '{if ($1==var) {print toupper($6)}}')"
		TIPO=${TIPO:-"EXT3"}
		;;
     8e)	TIPO="LINUX-LVM" ;;
     a7)	TIPO="CACHE" ;;
     bf)	TIPO="SOLARIS" ;;
     fd)	TIPO="$(parted -s $DISCO print | awk -v var=$2 '{if ($1==var) {print toupper($6)}}')"
		TIPO=RAID-${TIPO:-"EXT3"}
		;;
     *) 	TIPO="UNKNOWN" ;;
esac
echo $TIPO
}


#/**
#         ogMount int_ndisk int_npartition
#@brief   Monta un sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  Punto de montaje
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Tipo de particion desconocido o no se puede montar.
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-07-27
#*/
function ogMount () {

#/// Variables locales
local PART TYPE MNTDIR MOUNT

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1  =>  /mnt/sda1"
    return
fi

#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición.
PART="$(ogDiskToDev $1 $2)" || return $?

#/// Comprobar si la partición ya está montada. 
MNTDIR=$(mount | awk -v P=$PART '{if ($1==P) {print $3}}')
#/// Si no, montarla en un directorio de sistema
if [ -z "$MNTDIR" ]; then
    # Error si la particion esta bloqueada.
    #ogIsLocked $1 $2 && return $OG_ERR_LOCKED
    #/// Crear punto de montaje.
    MNTDIR=${PART/dev/mnt}
    mkdir -p $MNTDIR
    #/// Montar según el tipo de sitema de archivos.
    TYPE="$(ogGetFsType $1 $2)" || return $?
    case "$TYPE" in
        CACHE)          MOUNT=mount ;;
        EXT[234])       MOUNT=mount ;;
        NTFS|HNTFS)     MOUNT=ntfs-3g ;;
        BIGDOS|FAT32|HBIGDOS|HFAT32)
			MOUNT=mount.vfat ;;
        *)  #/// Error, si la partición no es montable.
            rmdir $MNTDIR
            ogRaiseError $OG_ERR_PARTITION "$1, $2, $TYPE"
	    return $OG_ERR_PARTITION
	    ;;
    esac
    $MOUNT $PART $MNTDIR || $MOUNT $PART $MNTDIR -o force,remove_hiberfile || ogRaiseError $OG_ERR_PARTITION "$1, $2, $TYPE" || return $?
fi
echo $MNTDIR
}


#/**
#         ogUnmount int_ndisk int_npartition
#@brief   Desmonta un sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  Nada
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@warning La partición no está previamente montada o no se puede desmontar.
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-07-27
#*/
function ogUnmount () {

#/// Variables locales
local PART

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición y punto de montaje.
PART="$(ogDiskToDev $1 $2)" || return $?
MNTDIR=$(mount | awk -v P=$PART '{if ($1==P) {print $3}}')

#/// Si está montada, desmontarla.
if [ -z "$MNTDIR" ]; then
    # Error si la particion esta bloqueada.
    #ogIsLocked $1 $2 && return $OG_ERR_LOCKED
    #/// Crear punto de montaje.
    umount $PART 2>/dev/null && rmdir $MNTDIR || ogEcho warning "$FUNCNAME: $MSG_DONTUNMOUNT: \"$1,$2\""
else
    ogEcho warning "$MSG_DONTMOUNT: \"$1,$2\""
fi
}


