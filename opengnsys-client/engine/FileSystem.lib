#!/bin/bash
#/**
#@file    FileSystem.lib
#@brief   Librería o clase FileSystem
#@class   FileSystem
#@brief   Funciones para gestión de sistemas de archivos.
#@version 0.9
#@warning License: GNU GPLv3+
#*/


#/**
#         ogExtendFs int_ndisk int_npartition
#@brief   Extiende un sistema de archivos al tamaño de su partición.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  (nada)
#@exception OG_ERR_FORMAT   Formato incorrecto.
#@exception OG_ERR_NOTFOUND Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Partición desconocida o no accesible.
#@note    Requisitos: *resize*
#@version 0.9 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-23
#*/
function ogExtendFs () {

# Variables locales.
local PART

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición.
PART="$(ogDiskToDev $1 $2)" || return $?

ogUnmount $1 $2 >/dev/null
#/// Redimensionar al tamano máximo según el tipo de partición.
case "$(ogGetFsType $1 $2)" in
     EXT[234])
	resize2fs -f $PART || ogReiseError $OG_ERR_PARTITION "$1,$2" || return $?
	;;
     REISERFS)		# Usar "resize_reiserfs"
	resize_reiserfs -f $PART || ogReiseError $OG_ERR_PARTITION "$1,$2" || return $?
	;;
     NTFS|HNTFS)
	ntfsresize -f $PART <<<"y" || ogReiseError $OG_ERR_PARTITION "$1,$2" || return $?
	;;
     *) ogReiseError $OG_ERR_PARTITION "$1,$2"
	return $? ;;
esac
}


#/**
#         ogGetFsType int_ndisk int_npartition
#@brief   Devuelve el mnemonico con el tipo de sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  Mnemonico
#@note 	  Mnemonico: { EXT2, EXT3, EXT4, REISERFS, LINUX-SWAP, LINUX-LVM, LINUX-RAID, FAT16, HFAT16, FAT32, HFAT32, NTFS, HNTFS, WIN-DYNAMIC, CACHE, EMPTY, EXTENDED, UNKNOWN }
#@exception OG_ERR_FORMAT   Formato incorrecto.
#@exception OG_ERR_NOTFOUND Disco o particion no corresponden con un dispositivo.
#@version 0.9 - Primera adaptación para OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-07-21
#*/
function ogGetFsType () {

# Variables locales.
local DISK ID TYPE

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1  =>  NTFS"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Detectar id. de tipo de partición y codificar al mnemonico.
DISK=$(ogDiskToDev $1) || return $?
ID=$(ogGetPartitionId $1 $2) || return $?
case "$ID" in
     0) 	TYPE="EMPTY" ;;
     5|f) 	TYPE="EXTENDED" ;;
     [6e])	TYPE="FAT16" ;;
     7) 	TYPE="NTFS" ;;          # Nota: también puede ser EXFAT
     [bc])	TYPE="FAT32" ;;
     12) 	TYPE="COMPAQDIAG" ;;
     1[6e])	TYPE="HFAT16" ;;
     17)	TYPE="HNTFS" ;;
     1[bc])	TYPE="HFAT32" ;;
     42)	TYPE="WIN-DYNAMIC" ;;
     82)	TYPE="LINUX-SWAP" ;;
     83)	TYPE="$(parted -s $DISK print | awk -v var=$2 '{if ($1==var) {print toupper($6)}}')"
		TYPE=${TYPE:-"EXT3"}
		;;
     8e)	TYPE="LINUX-LVM" ;;
     a7)	TYPE="CACHE" ;;
     bf)	TYPE="SOLARIS" ;;
     fd)	TYPE="LINUX-RAID" ;;
     *) 	TYPE="UNKNOWN" ;;
esac
echo $TYPE
}


#/**
#         ogIsLocked int_ndisk int_npartition
#@brief   Comprueba si una partición está bloqueada por una operación de uso exclusivo.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  0 - sin bloquear, 1 - bloqueada.
#@note    El fichero de bloqueo se localiza en \c /var/lock/part, siendo \c part el dispositivo de la partición, sustituyendo el carácter "/" por "-".
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-03
#*/
function ogIsLocked () {

# Variables locales
local PART LOCKFILE

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1  =>  0"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición.
PART="$(ogDiskToDev $1 $2)" || return $?

#/// Comprobar existencia del fichero de bloqueo.
LOCKFILE="/var/lock/lock${PART//\//-}"
test -f $LOCKFILE
}


#/**
#         ogLock int_ndisk int_npartition
#@see     ogLockPartition
#*/
function ogLock () {
ogLockPartition "$@"
}

#/**
#         ogLockPartition int_ndisk int_npartition
#@brief   Genera un fichero de bloqueo para una partición en uso exlusivo.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  (nada)
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@note    El fichero de bloqueo se localiza en \c /var/lock/part, siendo \c part el dispositivo de la partición, sustituyendo el carácter "/" por "-".
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-03
#*/
function ogLockPartition () {

# Variables locales
local PART LOCKFILE

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición.
PART="$(ogDiskToDev $1 $2)" || return $?

#/// Crear archivo de bloqueo exclusivo.
LOCKFILE="/var/lock/lock${PART//\//-}"
touch $LOCKFILE
}


#/**
#         ogMount int_ndisk int_npartition
#@see     ogMountPartition
#*/
function ogMount () {
ogMountPartition "$@"
}

#/**
#         ogMountPartition int_ndisk int_npartition
#@brief   Monta un sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  Punto de montaje
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Tipo de particion desconocido o no se puede montar.
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-07-27
#*/
function ogMountPartition () {

#/// Variables locales
local PART TYPE MNTDIR MOUNT

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1  =>  /mnt/sda1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición.
PART="$(ogDiskToDev $1 $2)" || return $?

#/// Comprobar si la partición ya está montada.
MNTDIR=$(mount | awk -v P=$PART '{if ($1==P) {print $3}}')
#/// Si no, montarla en un directorio de sistema
if [ -z "$MNTDIR" ]; then
    # Error si la particion esta bloqueada.
    ogIsLocked $1 $2 && ogRaiseError $OG_ERR_LOCKED "$1 $2" && return $?
    #/// Crear punto de montaje.
    MNTDIR=${PART/dev/mnt}
    mkdir -p $MNTDIR
    #/// Montar según el tipo de sitema de archivos.
    TYPE="$(ogGetFsType $1 $2)" || return $?
    case "$TYPE" in
        CACHE)          MOUNT=mount ;;
        EXT[234])       MOUNT=mount ;;
        REISERFS)       MOUNT=mount ;;
        NTFS|HNTFS)     MOUNT=ntfs-3g ;;
        FAT16|FAT32|HFAT16|HFAT32)
			MOUNT=mount.vfat ;;
        *)  #/// Error, si la partición no es montable.
            rmdir $MNTDIR
            ogRaiseError $OG_ERR_PARTITION "$1, $2, $TYPE"
	    return $OG_ERR_PARTITION
	    ;;
    esac
    $MOUNT $PART $MNTDIR || $MOUNT $PART $MNTDIR -o force,remove_hiberfile || ogRaiseError $OG_ERR_PARTITION "$1, $2, $TYPE" || return $?
fi
echo $MNTDIR
}



#/**
#         ogReduceFs int_ndisk int_npartition
#@brief   Reduce el tamaño del sistema de archivos, sin tener en cuenta el espacio libre.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  tamañoKB
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@exception OG_ERR_PARTITION Partición desconocida o no accesible.
#@warning   El sistema de archivos se amplía al mínimo + 1 KB.
#@note      Requisitos:	*resize*
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-23
#*/
function ogReduceFs () {

# Variables locales
local PART BLKS SIZE

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición.
PART="$(ogDiskToDev $1 $2)" || return $?

#/// Redimensionar según el tipo de particion.
case "$(ogGetFsType $1 $2)" in
     EXT[234])
	ogUnmount $1 $2 >/dev/null
	# Ext2/3/4: Tamaño de los bloques del sistema de archivos
	BLKS=$(tune2fs -l $PART | awk '/Block size/ {print int($3/512)}')
	# Traduce el num. en sectores de 512B a tamano en MB.
	SIZE=$(resize2fs -P $PART 2>/dev/null | \
		awk -v B=$BLKS '/minimum size/ {print int($7*B/2048+1000)}')
	resize2fs -fp $PART "${SIZE}M" &>/dev/null || ogReiseError $OG_ERR_PARTITION "$1,$2" || return $?
	;;
     REISERFS)		# Usar "resize_reiserfs"
	;;
     NTFS|HNTFS)
	rm -f $(ogGetPath $1 $2 pagefile.sys)
	ogUnmount $1 $2 >/dev/null
	#NTFS: Obtiene tamano minimo en MB.
	SIZE=$(ntfsresize -fi $PART | awk '/resize at/ {print $8+1000}')
	ntfsresize -fns "${SIZE}M" $PART >/dev/null || ogReiseError $OG_ERR_PARTITION "$1,$2" || return $?
	ntfsresize -fs "${SIZE}M" $PART <<<"y" >/dev/null || ogReiseError $OG_ERR_PARTITION "$1,$2" || return $?
	;;
     *) ogReiseError $OG_ERR_PARTITION "$1,$2"
	return $? ;;
esac
#/// Mostrar nuevo tamaño en KB.
echo $[SIZE*1024]
}


#/**
#         ogUnlock int_ndisk int_npartition
#@see     ogUnlockPartition
#*/
function ogUnlock () {
ogUnlockPartition "$@"
}

#/**
#         ogUnlockPartition int_ndisk int_npartition
#@brief   Elimina el fichero de bloqueo para una particion.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  (nada)
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@note    El fichero de bloqueo se localiza en \c /var/lock/part, siendo \c part el dispositivo de la partición, sustituyendo el carácter "/" por "-".
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-09-03
#*/
function ogUnlockPartition () {

# Variables locales
local PART LOCKFILE

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" \
           "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición.
PART="$(ogDiskToDev $1 $2)" || return $?

#/// Borrar archivo de bloqueo exclusivo.
LOCKFILE="/var/lock/lock${PART//\//-}"
rm -f $LOCKFILE
}



#/**
#         ogUnmount int_ndisk int_npartition
#@see     ogUnmountPartition
#*/
function ogUnmount () {
ogUnmountPartition "$@"
}

#/**
#         ogUnmountPartition int_ndisk int_npartition
#@brief   Desmonta un sistema de archivos.
#@arg  \c ndisk      nº de orden del disco
#@arg  \c npartition nº de orden de la partición
#@return  Nada
#@exception OG_ERR_FORMAT    Formato incorrecto.
#@exception OG_ERR_NOTFOUND  Disco o particion no corresponden con un dispositivo.
#@warning La partición no está previamente montada o no se puede desmontar.
#@version 0.1 - En pruebas para adaptarla a OpenGNSys.
#@author  Ramon Gomez, ETSII Universidad de Sevilla
#@date    2009-07-27
#*/
function ogUnmountPartition () {

# Variables locales
local PART MNTDIR

#/// Si se solicita, mostrar ayuda.
if [ "$*" == "help" ]; then
    ogHelp "$FUNCNAME" "$FUNCNAME int_ndisk int_npartition" "$FUNCNAME 1 1"
    return
fi
#/// Error si no se reciben 2 parámetros.
[ $# == 2 ] || ogRaiseError $OG_ERR_FORMAT || return $?

#/// Obtener partición y punto de montaje.
PART="$(ogDiskToDev $1 $2)" || return $?
MNTDIR=$(mount | awk -v P=$PART '{if ($1==P) {print $3}}')

#/// Si está montada, desmontarla.
if [ -n "$MNTDIR" ]; then
    # Error si la particion esta bloqueada.
    ogIsLocked $1 $2 && ogRaiseError $OG_ERR_LOCKED "$1 $2" && return $?
    #/// Crear punto de montaje.
    umount $PART 2>/dev/null && rmdir $MNTDIR || ogEcho warning "$FUNCNAME: $MSG_DONTUNMOUNT: \"$1,$2\""
else
    ogEcho warning "$MSG_DONTMOUNT: \"$1,$2\""
fi
}

function ogFindCache () {
#/**  @function ogFindCache: @brief Detecta la particion CACHE EAC seg�n tipo a7 o label CACHE sobre particion ext3.
#@param  no requiere parametros
#@return  devuelve el identificador linux de la particion CACHE.
#@warning  si no hay cache no devuelve nada
#@attention Requisitos: la salida de fdisk de la cache a7 debe ser NeXTSTEP
#@note	  Notas sin especificar
#@version 0.1       Date: 27/10/2008                 Author Antonio J. Doblas Viso. Universidad de Malaga
#*/
#
if [ $# != 0 ]
then
	Msg "FindCache detecta la particion tipo a7 o aquella que tenga el label CACHE" info
	Msg "devuelve /dev/sda3" info2
	Msg "sintaxis: FindCache   --- Ejemplo: FindCache -> /dev/sda3/ " example
	return
fi
end=`ogDiskToDev | wc -w`
unset cache
for (( disk = 1; disk <= $end; disk++))
do
	disco=`ogDiskToDev $disk`
	totalpart=`parted $disco print | egrep ^" [0123456789] " -c`
	#echo Buscando en disco: $disco con $totalpart particiones
	if [ `fdisk -l $disco | egrep ^/dev | grep NeXTSTEP | cut -f1 -d" "` ]
	then
	#	echo comprobando si es particion a7
		cache=`fdisk -l $disco | egrep ^/dev | grep NeXTSTEP | cut -f1 -d" "`
	else
		#echo comprobando si existe la etiqueta cache
		if ls -R /dev/disk/ | grep CACHE > /dev/null
		then
			devcache=`ls -ls /dev/disk/by-label/CACHE | awk -F..\/..\/ '{print $2}'`
			cache=/dev/$devcache
		fi
	fi
done
if [ -n "$cache" ]
then
	echo $cache
else
	return 1
fi
}




function ogFormatCache () {
#/**  @function ogFormatCache: @brief Formatea la Cache EAC y le asigna el label CACHE
#@param  No requiere
#@return   la propia del mkfs.ext3
#@warning
#@attention
#@note
#@version 0.1       Date: 27/10/2008                 Author Antonio J. Doblas Viso. Universidad de Malaga
#*/

if [ $# = 0 ]
then
	cd /
	ogUnmountCache
	dev=`ogFindCache`
	Msg "Iniciando el formateo de la particion CACHE, ubicada en $dev, y asignandole el label CACHE" red
	mkfs.ext3 $dev -L CACHE
	ogInfoCache
fi
if [ $# = 1 ]
then
	mkfs.ext3 $1 -L CACHE
fi
}
