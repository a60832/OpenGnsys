#!/bin/bash
##########################################################
##########################################################
#####librerias de PostConfiguracion v0.0.8r5 para Advanced Deploy enViorenment###########
# Liberado bajo licencia GPL <http://www.gnu.org/licenses/gpl.html>################
############# 2008 Antonio Jesús Doblas Viso  adv@uma.es ##########################
########### Universidad de Malaga (Spain)############################
##########################################################

tempPatron=/tmp/patron.tmp



function CrearPatron {
if [ $# = 0 ]
then
	echo sintaxis: PostCrearPatron identificador1 identificador2 identificadorM
	echo ejemplo:  PostCrearPatron adminpassword fullname orgname computername jonworkgroup domainadmin domainpass domainname
	echo IMPORTANTE: las varibles deben estar asignadas y exportadas.
else
	tempPatron=/tmp/patron.tmp
	rm -fr $tempPatron
	for variables in $*
	do 
		valor=`env | grep $variables | cut -f2 -d=`
		if [ -z "$valor" ]
		then 
			echo $variables no tiene valor asignado. El proceso no completo
			rm -fr $tempPatron
			#	exit
		else 
cat >> $tempPatron <<EOF
/\$$variables/s/\$$variables/$valor/g
EOF
		fi
	done
fi
}

function ParseaSysprep () {
if [ $# = 0 ]
then
	echo " requiere exportar todas las varibables: adminpassword fullname  orgname  computername joinworkgroup domainadmin domainpass domainname"
	echo "sintaxis: ParseaSysprep    ficherosysprepconVariables     int_disco int_particion"
	echo "ejemplos: ParseaSysprep   /var/EAC/gestion/SYSPREP.INF       1             1"
fi
if [ $# = 3 ]
then
	sed -f /tmp/patron.tmp $1 > /tmp/SYSPREP.INF
	#disco=`Disk $2$3`
	#ntfscp -f $disco /tmp/SYSPREP.INF /sysprep/
	disco=`MountPartition $2 $3`
	cat /tmp/SYSPREP.INF > ${disco}/sysprep/SYSPREP.INF
fi
}

function NTDetect {
declare -i count
count=0
end=`Disk | wc -w`
for (( DISCO = 1; DISCO <= $end; DISCO++))
do
	disk=`Disk $DISCO`
	totalpart=`parted $disk print | egrep ^" [0123456789] " -c`
	for (( PART = 1; PART <= $totalpart; PART++))
	do  
		if [ "$(TypeFS $DISCO $PART)" = "NTFS" ]
		then
			DISPOSITIVO=`Disk $DISCO $PART`
			FICH=`ntfsls -fq $DISPOSITIVO 2>/dev/null | grep boot.ini` 
			if [ -n "$FICH" ] 
			then 
				count=$count+1
				if [ $# = 0 ] 
				then
					echo $DISCO $PART accesible como windows${count}
					echo "exporta las variables \$Windows y \$SystemRoot"
				fi
				if [ "$#" = "1" -a "$1" = "$count" ] 
				then 
					export Windows="$DISCO $PART" && Windows="$DISCO $PART"
					echo $DISCO $PART
					PARTICION=`Disk $Windows`
					ntfsls -f $PARTICION  | grep WINDOWS  > /dev/null
					test $? = 0 && export SystemRoot=WINDOWS && SystemRoot=WINDOWS
					ntfsls -f $PARTICION  | grep WINNT  > /dev/null 
					test $? = 0  && export SystemRoot=WINNT && SystemRoot=WINNT
				fi	
			fi	    
		fi
      done
done
unset PARTICION
}





function LoadRegistrySystem {
echo requiere NTDetect que exporta Windows y SystemRoot
particion=`MountPartition $Windows`
export hiveSAM=${particion}/${SystemRoot}/system32/config/SAM
export hiveSystem=${particion}/${SystemRoot}/system32/config/system
export hiveSoftware=${particion}/${SystemRoot}/system32/config/software
unset particion
}

function LoadRegistryUsers {
export particion=`MountPartition $Windows`
mkfifo pipe 2>/dev/null
declare -i count
## los hive de sistema son 0, 1 y 2, los de usuarios empiezan por 3
## exporta el usuario con el id_hive correspondiente: 3, 4, 5 .....
## exporta la ruta de su hive $HiveUser3, $HiveUser4......tal /mnt/sda1/Documents\ and \Settings/jose/NTUSER.DAT
count=3
for user in $*
do	
	find ${particion}/ -type f -name NTUSER.DAT > pipe| cat pipe | grep $user > /tmp/path.txt
	if [ $? = 0 ]		
		then
		echo pefil de $user encontrado, para utilizar este usuario con funciones utilizar id_hive= $count o \$usuario
		read camino < /tmp/path.txt
		#echo camino $camino		
		#read HiveUser${count} < /tmp/path.txt
		#camino=`echo /tmp/path.txt | awk '{for (I=1;I<=NF;I++) print $I "-")'` 
		#echo $camino | sed -e 's/-/\\ /g'
		FormatSintaxSpacePath "$camino" > /tmp/path.txt
		camino2=`FormatSintaxSpacePath "$camino"`		
		#echo camino2 $camino2 
		#export camino2	
		FormatSintaxBackSlashPath "$camino2" > /tmp/path.txt	
		read HiveUser${count} < /tmp/path.txt
		#HiveUser${count}=`FormatSintaxSpacePath "$camino2"`
		#echo $HiveUser${count}
		export HiveUser${count}
		usuario=`echo $1`
		comando=`echo export $usuario="${count}"`
		$comando
		count=${count}+1
	fi
done
count=0
}

function UpdateRegistry {
if [ $# = 0 ]
then
	echo "sintaxis Requiere ejectuar la funcion NTDetect + LoadRegistrySystem previamente"
	echo "identifica 0=$hiveSAM 1=$hiveSystem 2=$hiveSoftware 3=$HiveUser3"
	echo sintaxis: int_windows $hiveUser $HiveUserN_N+3
	echo ejemplos: UpdateRegistry 1 $HiveUser3
	echo importante OJO con la contrabarra: export HiveUser3=/mnt/win/Documents\ and\ Settings/Default\ User/NTUSER.DAT
fi
#NTDetect $1
echo $Windows
echo $SystemRoot
echo id_hive0  $hiveSAM
echo id_hive1 $hiveSystem
echo id_hive2 $hiveSoftware
echo id_user $HiveUser3
#dispositivo=
#hiveSAM=/mnt/$1/${SystemRoot}/system32/config/SAM
#hiveSystem=/mnt/$1/${SystemRoot}/system32/config/system
#hiveSoftware=/mnt/$1/${SystemRoot}/system32/config/software
#echo $hiveSoftware
#MontarParticion $1
echo drbl-chntpw -f $temporal $hiveSAM $hiveSystem $hiveSoftware $HiveUser3 $HiveUser4 $HiveUser5 > /tmp/run.sh
cat /tmp/run.sh
sh /tmp/run.sh
rm -fr $temporal
# rm /tmp/run.sh
sleep 2
#UmountPartition $1
## &>/dev/null
}



function UpdateRegistryoriginal {
if [ $# = 0 ]
then
	echo "sintaxis Requiere ejectuar la funcion NTDetect + LoadRegistrySystem previamente"
	echo "identifica 0=$hiveSAM 1=$hiveSystem 2=$hiveSoftware 3=$HiveUser3"
	echo sintaxis: int_windows $hiveUser $HiveUserN_N+3
	echo ejemplos: UpdateRegistry 1 $HiveUser3
	echo importante OJO con la contrabarra: export HiveUser3=/mnt/win/Documents\ and\ Settings/Default\ User/NTUSER.DAT
fi
NTDetect $1

echo $SystemRoot
dispositivo=
hiveSAM=/mnt/$1/${SystemRoot}/system32/config/SAM
hiveSystem=/mnt/$1/${SystemRoot}/system32/config/system
hiveSoftware=/mnt/$1/${SystemRoot}/system32/config/software
echo $hiveSoftware
MontarParticion $1
echo drbl-chntpw -f $temporal $hiveSAM $hiveSystem $hiveSoftware $HiveUser3 $HiveUser4 $HiveUser5 > /tmp/run.sh
cat /tmp/run.sh
sh /tmp/run.sh
rm -fr $temporal
rm /tmp/run.sh
sleep 2
UmountPartition $1
## &>/dev/null
}

function NTChangeName {
if [ $# = 0 ]
then
echo sintaxis: NTChangeNAME str_$var
echo ejemplos: NTCHangeName adi${IPcuatro}-xp
fi
cat >> $temporal << EOF
h 1 
ed ControlSet001\Control\ComputerName\ComputerName\ComputerName
$1
ed ControlSet001\Services\Tcpip\Parameters\Hostname
$1
ed ControlSet001\Services\Tcpip\Parameters\NV Hostname
$1
h 2
cd \Microsoft\Windows NT\CurrentVersion\Winlogon
ed DefaultDomainName
$1
EOF
}

function NTDrivers () {
cat >> $temporal << EOF
h 1 
cd \ControlSet001\Control\CriticalDeviceDatabase

nk primary_ide_channel

cd primary_ide_channel

nv 1 ClassGUID

ed ClassGUID

{4D36E96A-E325-11CE-BFC1-08002BE10318}

nv 1 Service

ed Service

atapi


cd \ControlSet001\Control\CriticalDeviceDatabase\
nk secondary_ide_channel
cd secondary_ide_channel
nv 1 ClassGUID
ed ClassGUID 
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
atapi

ed ControlSet001\Control\CriticalDeviceDatabase\*pnp0600\ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\*pnp0600\Service
atapi

ed ControlSet001\Control\CriticalDeviceDatabase\*azt0502\ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\*azt0502\Service
atapi

ed ControlSet001\Control\CriticalDeviceDatabase\gendisk\ClassGUID
{4D36E967-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\gendisk\Service
disk

ed ControlSet001\Control\CriticalDeviceDatabase\pci#cc_0101\ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\pci#cc_0101\Service
pciide

ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_0e11&dev_ae33\ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_0e11&dev_ae33\Service
pciide

ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_1039&dev_0601\ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_1039&dev_0601\Service
pciide

ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_1039&dev_5513\ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_1039&dev_5513\Service
pciide

ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_1042&dev_1000\ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
ed ControlSet001\Control\CriticalDeviceDatabase\pci#ven_1042&dev_1000\Service
pciide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_105a&dev_4d33
cd pci#ven_105a&dev_4d33
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_1095&dev_0640
cd pci#ven_1095&dev_0640
nv 1 ClassGUID
ed  ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_1095&dev_0646
cd pci#ven_1095&dev_0646
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide


cd  \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_1097&dev_0038
cd pci#ven_1097&dev_0038
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide




cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_10ad&dev_0001
cd pci#ven_10ad&dev_0001
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide


cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_10ad&dev_0150
cd pci#ven_10ad&dev_0150
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide


cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_10b9&dev_5215
cd pci#ven_10b9&dev_5215
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide


cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_10b9&dev_5219
cd pci#ven_10b9&dev_5219
nv 1 ClassGUID
ed 1 ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_10b9&dev_5229
cd pci#ven_10b9&dev_5229
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1Service
ed Service
pciide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_1106&dev_0571
cd pci#ven_1106&dev_0571
nv 1 Service
ed Service 
pciide
nv 1 ClassGUID
ed ClassGUID 
{4D36E96A-E325-11CE-BFC1-08002BE10318}

cd \ControlSet001\Control\CriticalDeviceDatabase
nk 1 pci#ven_8086&dev_1222
cd pci#ven_8086&dev_1222
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
intelide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_8086&dev_1230
cd pci#ven_8086&dev_1230
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
intelide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_8086&dev_2411
cd pci#ven_8086&dev_2411
nv 1 ClassGUID
ed ClassGuid
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
intelide

cd \ControlSet001\Control\CriticalDeviceDatabase
cd pci#ven_8086&dev_2421
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
intelide


cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_8086&dev_7010
cd pci#ven_8086&dev_7010
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
intelide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_8086&dev_7111
cd pci#ven_8086&dev_7111
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
intelide

cd \ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_8086&dev_7199
cd pci#ven_8086&dev_7199
nv 1 ClassGUID
ed ClassGUID 
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
intelide


EOF
}


function NTDrivers2 () {
cat >> $temporal << EOF
h 1 
cd ControlSet001\Control\CriticalDeviceDatabase
nk pci#ven_1097&dev_0038
cd pci#ven_1097&dev_0038
nv 1 ClassGUID
ed ClassGUID
{4D36E96A-E325-11CE-BFC1-08002BE10318}
nv 1 Service
ed Service
pciide

EOF
}

function NTSetGroupName {
if [ $# = 0 ]
then
echo sintaxis: NTSetGroupName str_$var
echo ejemplos: NTSetGroupName adi
fi
cat >> $temporal << EOF
h 2
ed \Microsoft\Windows NT\CurrentVersion\Winlogon\DefaultDomainName
$1
EOF
}


function NTSetOwner {
if [ $# = 0 ]
then
echo sintaxis: NtSetOwner str_propietario str_organizacion
echo ejemplos: NTSetOwner eu\ politecnica universidad\ de\ malaga
fi
cat >> $temporal << EOF
h 2
ed \Microsoft\Windows NT\CurrentVersion\RegisteredOwner
$1
ed \Microsoft\Windows NT\CurrentVersion\RegisteredOrganization
$2
EOF
}


function NTAutoLogon {
if [ $# = 0 ]
then
echo sintaxis: Int_Activar Int_nves str_usuario str_passwd str_equipo 
echo ejemplos: 1 2 administrador 3451 $equipo
echo IMPORTANTE: cuando AutoLogonCount llegue a 0, activa el AutoAdminLogon a 0. Pero no borra los valores de DefaultPassword
return 2
fi
cat >> $temporal << EOF
hive 2
cd \Microsoft\Windows NT\CurrentVersion\Winlogon
nv 1 AutoAdminLogon
ed AutoAdminLogon
$1
nv 1 AutoLogonCount
ed AutoLogonCount
$2
nv 1 DefaultUserName
ed DefaultUserName
$3
nv 1 DefaultPassword
ed DefaultPassword
$4
nv 1 DefaultDomainName
ed DefaultDomainName
$5
EOF
}

function NTStatusRatonTeclado {
if [ $# = 0 ]
then
echo sintaxis: Int-StatusRaton Int-StatusTeclado 
echo ejemplos:  int=1 activo   int=4 desactivado
return 2
fi
cat >> $temporal << EOF
hive 1
cd \ControlSet001\Services\Mouclass
ed Start
$1
cd \ControlSet001\Services\Kbdclass
ed Start
$2
EOF
}

function NTRunOnceMachine {
if [ $# = 0 ]
then
echo sintaxis:  PathScripts idScripts
echo "ejemplo:   c:\\\\WINDOSWS\\\\crearusuarios.bat  scripts1"
echo "IMPORTANTE: el path debe llevar dos barras \\, pero como se deben 'escapar' debes poner cuatro \\\\"
return 2
fi
cat >> $temporal << EOF
h 2
cd \Microsoft\Windows\CurrentVersion\RunOnce
nv 1 $2
ed $2
$1
EOF
}

function NTRunMachine {
if [ $# = 0 ]
then
echo sintaxis:  PathScripts idScripts
echo ejemplo:   c:\\\\WINDOSWS\\\\crearusuarios.bat  scripts1
echo IMPORTANTE: el path debe llevar dos barras \\, pero como se deben 'escapar' debes poner cuatro \\\\
return 2
fi
cat >> $temporal << EOF
h 2
cd \Microsoft\Windows\CurrentVersion\Run
nv 1 $2
ed $2
$1
EOF
}

function NTRunUser {
if [ $# = 0 ]
then
echo sintaxis:  str_PathWINScripts str_idScripts Int_hive||\$usuario
echo ejemplo:   c:\\\\WINDOSWS\\\\crearusuarios.bat  scripts1 3
echo IMPORTANTE: el pathWIN debe llevar dos barras \\, pero como se deben 'escapar' debes poner cuatro \\\\
echo IMPORTANTE: el pathLinux si lleva espacios debe escaparse con una barra \\
echo IMPORTANTE Int_hive: 3 para el primer usuario, 4 para el segundo usuario
echo requiere export un HiveUser3=/mnt/windows/Document\ and\ Seeting\alumnmos\NTUSER.dat
return 2
fi
cat >> $temporal << EOF
h $3
cd \Software\Microsoft\Windows\CurrentVersion\Run
nv 1 $2
ed $2
$1
EOF
}


function NTPolUserOn {
if [ $# = 0 ]
then
Msg "requiere LoadRegistryUser str_user1 str_user2..." orange
echo sintaxis:  Int_hive
echo "ejemplo: NTPolUserOn 3
echo "IMPORTANTE:  la variable HiveUser3=/mnt/windows/Document/\ and/\ Seeting\alumnmos\NTUSER.dat
return 2
fi
cp /var/EAC/admin/utilswin/Fondo.BMP ${particion}/WINDOWS/
cat >> $temporal << EOF
h $1
cd \Control Panel\Desktop
ed Wallpaper
C:\\WINDOWS\\fondo.bmp

cd \Software\Microsoft\Windows\CurrentVersion\Policies
nk Explorer
cd Explorer

nv 4 NoDesktop
ed NoDesktop
1

nv 4 NoSimpleStartMenu
ed NoSimpleStartMenu
1
nv 4 NoWindowsUpdate
ed NoWindowsUpdate
1

nv 4 NoSMConfigurePrograms
ed NoSMConfigurePrograms
1

nv 4 NoChangeStartMenu
ed NoChangeStartMenu
1

nv 4 Intellimenus
ed Intellimenus
1

nv 4 NoRun
ed NoRun
1

nv 4 NoRecentDocsHistory
ed NoRecentDocsHistory
1
EOF
}

function NTPolUserOFF {
if [ $# = 0 ]
then
Msg "requiere LoadRegistryUser str_user1 str_user2..." orange
echo sintaxis:  Int_hive
echo "ejemplo: NTPolUserOFF 3
echo "IMPORTANTE:  la variable HiveUser3=/mnt/windows/Document/\ and/\ Seeting\alumnmos\NTUSER.dat
return 2
fi
cat >> $temporal << EOF
h $1
cd \Control Panel\Desktop
ed Wallpaper
C:\\WINDOWS\\web\\wallpaper\\Felicidad.bmp

cd \Software\Microsoft\Windows\CurrentVersion\
rdel Policies
nk Policies
1
EOF
}


function NTStatusBootChk {
if [ $# = 0 ]
then
echo sintaxis: Int-Status
echo ejemplos:  int=0 desactivado int=1 activado
return 2
fi
[ $1 = 0 ] && valor="none"
[ $1 = 1 ] && valor="autocheck autochk *"
cat >> $temporal << EOF
hive 1
cd \ControlSet001\Control\Session Manager
ed BootExecute
$valor
--n
EOF
}

function NTNoMsgNewHardware {
export particion=`MountPartition $Windows`
cp /var/EAC/admin/utilswin/NoMsgNewHardware.exe ${particion}/${SystemRoot}
NTRunOnceMachine c:\\\\${SystemRoot}\\\\NoMsgNewHardware.exe NoMsg
}


