# Vagrantfile to install OpenGnsys 1.1 virtual environment using VirtualBox provider.

VAGRANTFILE_API_VERSION = "2"
# VM provider: Oracle VM VirtualBox.
ENV['VAGRANT_DEFAULT_PROVIDER'] = "virtualbox"
# Language (accepted values: es_ES, ca_ES, en_GB).
LANGUAGE = "es_ES"
ENV['LC_ALL'] = LANGUAGE + ".UTF-8"
# Number of OpenGnsys clients (accepted values: from 2 to 9).
NCLIENTS = 4
# Repository virtual disk: file and size (GB).
REPODISK = "ogRepo.vdi"
REPOSIZE = 50
# Amount of memory for server and clients (MB)
SERVERMEM = 1024	# Minimum: 512
CLIENTMEM = 512		# Minimum: 256
# Clients MAC address prefix.
MACPREFIX = "08:00:27:0E:65:"
NETPREFIX = "192.168.2."
# Local port to access OpenGnsys Server.
LOCALWEBPORT = 8443

# OpenGnsys Server provisioning script: prepare repo disk, install OpenGnsys, change default interface, configure DHCP server.
OGSERVERSCRIPT = <<EOT
# Mount repository disk.
test -n "$(blkid /dev/sdb1 | grep ext4)" && exit
echo -e "o\nn\np\n\n\n\nw" | fdisk /dev/sdb
mkfs -t ext4 /dev/sdb1
mkdir -p /opt/opengnsys/images
echo "/dev/sdb1  /opt/opengnsys/images  ext4  defaults  0  0" >> /etc/fstab
mount -a
# Install OpenGnsys and change server address.
wget -q http://opengnsys.es/svn/branches/version1.1/installer/opengnsys_installer.sh -O - | bash
echo y | sudo /opt/opengnsys/bin/setserveraddr enp0s8
# Insert DHCP data.
for ((i=#{NCLIENTS}; i>0; i--)); do
    sed -i "/^}$/ i host ogClient0${i} { hardware ethernet #{MACPREFIX}0${i}; fixed-address #{NETPREFIX}1${i}; }" /etc/dhcp/dhcpd.conf
done
service isc-dhcp-server restart
# Set language.
export LANG="#{LANGUAGE}.UTF-8"
echo "LANG=\"$LANG\"" > /etc/default/locale
echo "LANG=\"$LANG\"" >> /etc/environment
locale-gen --lang #{LANGUAGE}
sed -i "s/XKBLAYOUT=.*/XKBLAYOUT=\"${LANG%_*}\"/" /etc/default/keyboard
dpkg-reconfigure -fnoninteractive console-setup
# Comment out next lines for automatic data insertion.
#SQL="INSERT INTO aulas (nombreaula, idcentro, urlfoto, grupoid, ubicacion, puestos, modomul, ipmul, pormul, velmul, router, netmask, ntp, dns, proxy, modp2p, timep2p) VALUES  ('Aula virtual', 1, 'aula.jpg', 0, 'Despliegue virtual con Vagrant.', 5, 2, '239.194.2.11', 9000, 70, '#{NETPREFIX}1', '255.255.255.0', '', '', '', 'peer', 30); INSERT INTO ordenadores (nombreordenador, ip, mac, idaula, idrepositorio, idperfilhard, idmenu, idproautoexec, grupoid, router, mascara, arranque, netiface, netdriver, fotoord) VALUES"
#for ((i=1; i<=#{NCLIENTS}; i++)); do
#    SQL="$SQL ('ogClient0$i', '#{NETPREFIX}1$i', REPLACE('#{MACPREFIX}0$i',':',''), 1, 1, 0, 0, 0, 0, '#{NETPREFIX}1', '255.255.255.0', '00unknown', 'eth0', 'generic', 'fotoordenador.gif'),"
#done
#mysql -u usuog -ppassusuog -D ogAdmBD -e "${SQL%,}"
#/opt/opengnsys/bin/setclientmode ogAdmin ogClient01 1
#for ((i=2; i<=#{NCLIENTS}; i++)); do
#    /opt/opengnsys/bin/setclientmode ogClient ogClient0$i 1
#done
echo "New OpenGnsys local URL: https://localhost:#{LOCALWEBPORT}/opengnsys/"
EOT

# Client 1 OS provisioning script.
MODELSCRIPT = <<EOT
# Comment out next lines to install and configure OGAgent for Ubuntu.
#apt-get install -y libxss1 policykit-1 python python-requests python-qt4 python-six python-prctl
#wget -q http://opengnsys.es/svn/branches/version1.1-tickets/OGAgent-ticket718/client/shared/lib/ogagent/ogagent_1.1.0_all.deb	# temporal
#dpkg -i ogagent_1.1.0_all.deb
#sed -i "0,/remote=/ s,remote=.*,remote=https://#{NETPREFIX}10/opengnsys/rest/," /usr/share/OGAgent/cfg/ogagent.cfg
# Remove network configuration added by Vagrant.
sed -i "/VAGRANT/,$ d" /etc/network/interfaces
echo "After now, use VirtualBox GUI to disable network interface 1 and work with this VM."
# Leave VM halted.
sleep 2
poweroff &
EOT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # OpenGnsys Server VM definition.
  config.vm.define "ogAdministrator", primary: true do |og|
    # Specific VirtualBox configuration.
    og.vm.provider "virtualbox" do |vb|
      # VM name, memory and CPUs.
      vb.name = "ogAdministrator"
      vb.memory = SERVERMEM
      vb.cpus = 1
      # Get VM disk path
      line = `VBoxManage list systemproperties | grep "Default machine folder"`
      vb_machine_folder = line.split(':')[1].strip()
      second_disk = File.join(vb_machine_folder, vb.name, REPODISK)
      # Create repo virtual disk, if needed.
      unless File.exist?(second_disk)
        vb.customize ['createhd', '--filename', second_disk, '--size', REPOSIZE * 1024]
      end
      # Attach repo virtual disk.
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', second_disk]
    end
    # VM base and host name.
    og.vm.box = "bento/ubuntu-16.04"
    og.vm.hostname = "ogAdministrator"
    # Network configuration: forward web port and attach new interface to VMs private network.
    og.vm.network "forwarded_port", guest: 443, host: 8443
    og.vm.network "private_network", ip: "#{NETPREFIX}10", virtualbox__intnet: true
    # Comment out to disable synced folder.
    #og.vm.synced_folder ".", "/vagrant", disabled: true
    # Launch provisioning script.
    og.vm.provision "shell", inline: OGSERVERSCRIPT
  end

  # Client 1 VM definition.
  config.vm.define "ogClient01", autostart: false do |v1|
    v1.vm.box = "bento/ubuntu-16.04"
    v1.vm.hostname = "ogClient01"
    v1.vm.network "private_network", mac: "#{MACPREFIX}01".tr(":",""), type: "dhcp", virtualbox__intnet: true
    v1.vm.provider "virtualbox" do |vb|
      vb.name = "ogClient01"
      vb.memory = CLIENTMEM
      vb.cpus = 1
      vb.customize ['modifyvm', :id, '--boot1', 'net', '--boot2', 'disk']
    end
    v1.vm.synced_folder ".", "/vagrant", disabled: true
    v1.vm.provision "shell", inline: MODELSCRIPT
  end

  # Clonable clients definition.
  (2..NCLIENTS).each do |i|
    config.vm.define "ogClient0#{i}", autostart: false do |cl|
      cl.vm.box = "clink15/pxe"
      cl.ssh.insert_key = false
      cl.vm.boot_timeout = 5
      cl.vm.network "private_network", mac: "#{MACPREFIX}".tr(":","") + "%02d" % "#{i}", type: "dhcp", virtualbox__intnet: true
      cl.vm.provider "virtualbox" do |vb|
        vb.name = "ogClient0#{i}"
        vb.memory = CLIENTMEM
        vb.cpus = 1
        vb.customize ['modifyvm', :id, '--boot1', 'net', '--boot2', 'disk']
        vb.customize ["modifyvm", :id, "--nic1", "none"]
      end
    end
  end

end

