<?php

/*
 * This file is part of the Opengnsys Project package.
 *
 * Created by Opengnsys on 01/10/18. <info@globunet.com>
 * Copyright (c) 2015 Opengnsys Soluciones TecnolÃ³gicas, SL. All rights reserved.
 *
 */

namespace Opengnsys\ServerBundle\Entity\Repository;

use Opengnsys\CoreBundle\Entity\Repository\BaseRepository;

/**
 * TraceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TraceRepository extends BaseRepository
{
    public function searchBy($limit , $offset, $finished)
    {

        $qb = $this->createQueryBuilder('o');


        if($finished != null){
            if($finished){
                $qb->andWhere("o.status is not null");
            }else{
                $qb->andWhere("o.status is null");
            }
        }

        if($limit != null){
            $qb->setMaxResults($limit);
        }
        if($offset != null){
            $qb->setFirstResult($offset);
        }

        try {
            $objects = $qb->getQuery()->getResult();
        } catch (NoResultException $e) {
            $message = sprintf('Unable to find an objects');
            throw new NotFoundHttpException($message, null, 0, $e);
        }
        return $objects;
    }

    public function searchStatus($clients , $ou){
        $qb = $this->createQueryBuilder('o');

        $qb->select('o.id, o.status');

        if($ou){
            $qb->andWhere("o.organizationalUnit = :organizationalUnit")->setParameter("organizationalUnit", $ou);
        }

        if($clients){
            $qb->andWhere("o.id in (:clients)")->setParameter("clients", $clients);
        }

        try {
            $objects = $qb->getQuery()->getScalarResult();
        } catch (NoResultException $e) {
            $message = sprintf('Unable to find an objects');
            throw new NotFoundHttpException($message, null, 0, $e);
        }
        return $objects;
    }

    public function findByObservable($term = "", $limit = null, $offset = null, $ordered = array(), $selects = array(), $searchs = array(), $matching = array())
    {
        $qb = $this->createQueryBuilder('o');

        if(count($selects) > 0){
            $qb = $this->createSelect($qb, $selects);
        }else{
            $qb->select("DISTINCT o.createdAt, o.updatedAt, o.notes, o.title, o.commandType, o.script, o.status, o.output, o.error, o.executedAt, o.finishedAt, o.id");
        }

        if($term != ""){
            if(count($searchs) > 0){
                $qb = $this->createSearch($qb, $term, $searchs);
            }else{
                $qb->andWhere("o.createdAt LIKE :term OR o.updatedAt LIKE :term OR o.notes LIKE :term OR o.title LIKE :term OR o.commandType LIKE :term OR o.script LIKE :term OR o.status LIKE :term OR o.output LIKE :term OR o.error LIKE :term OR o.executedAt LIKE :term OR o.finishedAt LIKE :term OR o.id LIKE :term ")->setParameter('term', '%' . $term . '%');
            }
        }

        $qb = $this->createMaching($qb, $matching);

        $qb = $this->createOrdered($qb, $ordered);

        if($limit != null){
            $qb->setMaxResults($limit);
        }

        if($offset){
            $qb->setFirstResult($offset);
        }

        $entities = $qb->getQuery()->getScalarResult();
        return $entities;
    }

    public function countFiltered($term = "", $searchs = array(), $matching = array())
    {
        $qb = $this->createQueryBuilder('o');

        $qb->select("count(DISTINCT o.id)");

        if($term != ""){
            if(count($searchs) > 0){
                $qb = $this->createSearch($qb, $term, $searchs);
            }else{
                $qb->andWhere("o.createdAt LIKE :term OR o.updatedAt LIKE :term OR o.notes LIKE :term OR o.title LIKE :term OR o.commandType LIKE :term OR o.script LIKE :term OR o.status LIKE :term OR o.output LIKE :term OR o.error LIKE :term OR o.executedAt LIKE :term OR o.finishedAt LIKE :term OR o.id LIKE :term ")->setParameter('term', '%' . $term . '%');
            }
        }

        $qb = $this->createMaching($qb, $matching);

        $count = $qb->getQuery()->getSingleScalarResult();
        return $count;
    }
}
